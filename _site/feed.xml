<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-07-18T04:59:21+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">r3dw0lf_sec</title><subtitle>Official r3dw0lfsec blog. Follow this blog for awesome Infosec Articles</subtitle><author><name>Venkatraman K</name><email>kvenkatraman10@gmail.com</email></author><entry><title type="html">Book Machine Walkthrough</title><link href="http://localhost:4000/blogs/hackthebox/book.html" rel="alternate" type="text/html" title="Book Machine Walkthrough" /><published>2020-07-11T00:00:00+05:30</published><updated>2020-07-11T00:00:00+05:30</updated><id>http://localhost:4000/blogs/hackthebox/book</id><content type="html" xml:base="http://localhost:4000/blogs/hackthebox/book.html">&lt;p class=&quot;lead&quot;&gt;&lt;strong&gt;&lt;em&gt;“There is no friend as loyal as a book.”&lt;/em&gt;&lt;/strong&gt; - Ernest Hemingway&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/book.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#machine-matrix&quot; id=&quot;markdown-toc-machine-matrix&quot;&gt;Machine Matrix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#machine-summary&quot; id=&quot;markdown-toc-machine-summary&quot;&gt;Machine Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nmap-scan&quot; id=&quot;markdown-toc-nmap-scan&quot;&gt;Nmap Scan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeration-on-port-80&quot; id=&quot;markdown-toc-enumeration-on-port-80&quot;&gt;Enumeration on port 80&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sql-truncation-attack&quot; id=&quot;markdown-toc-sql-truncation-attack&quot;&gt;SQL Truncation Attack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#local-file-read-via-xss&quot; id=&quot;markdown-toc-local-file-read-via-xss&quot;&gt;Local File Read Via XSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#acquring-user-shell&quot; id=&quot;markdown-toc-acquring-user-shell&quot;&gt;Acquring User Shell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#privilege-escalation&quot; id=&quot;markdown-toc-privilege-escalation&quot;&gt;Privilege escalation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;machine-matrix&quot;&gt;Machine Matrix&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/matrix.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;machine-summary&quot;&gt;Machine Summary&lt;/h2&gt;
&lt;p&gt;Box has an webapplication running that has two user roles: 1. Normal User 2. Admin. Normal user can suggest a book with book name and author of the book, once the book is submitted the admin would approve it. There is an XSS attack in these fields. Admin can be again registered as a user using SQL Truncation attack. The book and author name entered by the user is processed, generated in a pdf that can be viewed in the Admin panel. We use this attack scenario to read the local system files (/etc/passwd and ssh keys of a user). With this, we can gain the user shell through SSH. Inorder to esclate the privileges to root, we monitor the services that are running in the box using &lt;a href=&quot;https://github.com/DominicBreuker/pspy&quot;&gt;pspy&lt;/a&gt;. Logrotate is the process that gets executed every 5 seconds and it as exploit. We use that for privilege escalation&lt;/p&gt;

&lt;h2 id=&quot;nmap-scan&quot;&gt;Nmap Scan&lt;/h2&gt;
&lt;p&gt;I started the enumeration with nmap scan&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; 10.10.10.10.176
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Box had two ports open&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Port&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Service&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SSH&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Apache&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;enumeration-on-port-80&quot;&gt;Enumeration on port 80&lt;/h2&gt;
&lt;p&gt;I ran dirbuster on port 80&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running dirbuster revealed certain end points that are accessible other than 302:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/admin/
/index.php
/admin/index.php
/db.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These didn’t have any kind of juicy data so i started to enumerate on the port 80 I created an account in the application&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I enumerated the entire site with the application. There was a functionality (book submission) i can suggest  a book and that would be approved by the admin. So i thought i can upload a malicious fight and if i could get or bypass admin authentication then i would possibly approve it and the exploit code running. I also found admin’s mail id in contact us page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I visited the admin page but it needed admin credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sql-truncation-attack&quot;&gt;SQL Truncation Attack&lt;/h2&gt;
&lt;p&gt;On viewing the source of the signup page, length of the name and the email parameters are predefined.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Name: Not more than 10 characters
email: 20 characters
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On researching a bit, i came to know i can possible use sql truncation attack to signup as admin user (admin@book.htb)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;local-file-read-via-xss&quot;&gt;Local File Read Via XSS&lt;/h2&gt;
&lt;p&gt;I went to the admin login page and logged in as admin with  password that i used during the registration (SQL truncation attack). Collections is the page that is related to the functionality which was discussed earlier in this module. I went on with user module and after enumerating a bit, i found that at book submission book title and Author is vulnerable to some kind of stored xss attack. when i give a script tag in the book title,author and upload a random file. This data is processed and exported as a pdf file that can be viewed in admin panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Upon researching, i came to know how xss attack can be used to read the intermal files. &lt;strong&gt;&lt;a href=&quot;https://www.noob.ninja/2017/11/local-file-read-via-xss-in-dynamically.html&quot;&gt;Local File Read Via XSS&lt;/a&gt;&lt;/strong&gt;. 
I used the below script to read the /etc/passwd file present in the machine, from which i can get the list of potential users.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;file:///etc/passwd&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;acquring-user-shell&quot;&gt;Acquring User Shell&lt;/h2&gt;
&lt;p&gt;There is only one potential user (user that have home/user are considered as actual users other all are just services like daemon). Now I would try to read the ssh private key present in the .ssh directory of the user, so that i can login into the box using the key.
Below is the script for reading the ssh private key of the user &lt;strong&gt;reader&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;file:///home/reader/.ssh/id_rsa&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, I logged in as admin to view the proccessed pdf. I got ssh private key. I copied the entire key to my kali machine and saved it as id_rsa. I set the permissions to the id_rsa file using the below command.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;600 id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I logged into the machine as user reader and got the user.txt&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;privilege-escalation&quot;&gt;Privilege escalation&lt;/h2&gt;
&lt;p&gt;I ran the linpeas it revealed some information that can be liverged to be used for priv-esec, it showed that logrotate is present and it is vulnerable to logrotten exploit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also ran pspy to monitor what are the services running in the machine and inorder to check whether there is any service related to logrotate or logrotate process is getting executed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As expected logrotate is getting executed every 5 seconds. The logrotate utility makes log rotation easy. “Log rotation” refers to the practice of archiving an application’s current log, starting a fresh log, and deleting older logs. The system usually runs logrotate once a day, and when it runs it checks rules that can be customized on a per-directory or per-log basis.
so that root part is clear we must use the logrotten exploit (race condition vulnerability) &lt;strong&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/47466&quot;&gt;exploit&lt;/a&gt;&lt;/strong&gt;
If logrotate is executed as root, with option that creates a file ( like create, copy, compress, etc.) and the user is in control of the logfile path, it is possible to abuse a race-condition to write files in ANY directories
Conditions for privilege escalation&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Logrotate has to be executed as root&lt;/li&gt;
  &lt;li&gt;The logpath needs to be in control of the attacker&lt;/li&gt;
  &lt;li&gt;Any option that creates files is set in the logrotate configuration&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the preconditions are satisfied as the logrotate is executed by root and i had an accessible log file that is /home/reader/backups/access.log
I transfered the compiled file of logrotten exploit to the box in /tmp directory as i had access over it completely.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I created the payload file that can grant me root shell through copying the /bin/bash file to /tmp then i executed the exploit&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./logrooten &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; exp /home/reader/backups/access.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When i executed the copied file it granted me the root shell
&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead we can also create a payload file that copies the root.txt file directly to the /tmp directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/HTB/book/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Happy Hacking !&lt;/p&gt;</content><author><name>Venkatraman K</name><email>kvenkatraman10@gmail.com</email></author><category term="Blogs" /><category term="Hackthebox" /><summary type="html">“There is no friend as loyal as a book.” - Ernest Hemingway</summary></entry><entry><title type="html">Serverless Computing in a Nutshell</title><link href="http://localhost:4000/blogs/cloudsecurity/serverless.html" rel="alternate" type="text/html" title="Serverless Computing in a Nutshell" /><published>2020-02-07T00:00:00+05:30</published><updated>2020-02-07T00:00:00+05:30</updated><id>http://localhost:4000/blogs/cloudsecurity/serverlesscomputing</id><content type="html" xml:base="http://localhost:4000/blogs/cloudsecurity/serverless.html">&lt;p class=&quot;lead&quot;&gt;Most of the Serverless architecture are built with a motto of &lt;strong&gt;&lt;em&gt;“Focus on the application, not the infrastructure and maintenance”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/cloudsecurity/serverlesscomputing/1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-serverless-&quot; id=&quot;markdown-toc-what-is-serverless-&quot;&gt;What is serverless ?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#popular-serverless-computing-providers&quot; id=&quot;markdown-toc-popular-serverless-computing-providers&quot;&gt;Popular Serverless Computing Providers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-does-serverless-computing-works&quot; id=&quot;markdown-toc-how-does-serverless-computing-works&quot;&gt;How Does Serverless Computing Works?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#things-serverless-computing-can-handle&quot; id=&quot;markdown-toc-things-serverless-computing-can-handle&quot;&gt;Things Serverless Computing can Handle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sample-use-case-scenario-of-serverless-computing&quot; id=&quot;markdown-toc-sample-use-case-scenario-of-serverless-computing&quot;&gt;Sample Use-Case Scenario of Serverless Computing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#benefits-of-serverless-computing&quot; id=&quot;markdown-toc-benefits-of-serverless-computing&quot;&gt;Benefits of Serverless Computing:&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#serverless-computing-using-aws-lambda&quot; id=&quot;markdown-toc-serverless-computing-using-aws-lambda&quot;&gt;Serverless Computing using AWS Lambda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#serverless-computing-using-azure-functions&quot; id=&quot;markdown-toc-serverless-computing-using-azure-functions&quot;&gt;Serverless Computing using Azure Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#serverless-computing-using-google-cloud-functions&quot; id=&quot;markdown-toc-serverless-computing-using-google-cloud-functions&quot;&gt;Serverless Computing using Google Cloud Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comparison&quot; id=&quot;markdown-toc-comparison&quot;&gt;Comparison&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#security-risks-in-serverless-computing&quot; id=&quot;markdown-toc-security-risks-in-serverless-computing&quot;&gt;Security Risks in Serverless Computing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-serverless-&quot;&gt;What is serverless ?&lt;/h2&gt;
&lt;p&gt;Serverless is a cloud computing execution model where the cloud provider dynamically manages the allocation and provisioning of servers (Load balancing). A serverless application runs in stateless compute containers that are event-triggered and its completely managed by the cloud provider itself.&lt;/p&gt;

&lt;h3 id=&quot;popular-serverless-computing-providers&quot;&gt;Popular Serverless Computing Providers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;AWS lambda&lt;/li&gt;
  &lt;li&gt;Azure functions&lt;/li&gt;
  &lt;li&gt;Google Cloud functions&lt;/li&gt;
  &lt;li&gt;IBM OpenWhisk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-does-serverless-computing-works&quot;&gt;How Does Serverless Computing Works?&lt;/h3&gt;
&lt;p&gt;In a micro service architecture, monolithic applications are broken down into smaller services (F1,F2,F3) so you can develop, manage and scale them independently and FaaS (Function as a service) takes that step further by breaking applications to the level of functions and events.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/cloudsecurity/serverlesscomputing/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Business person just need to write the business logic as code ( F1,F2,F3), it is loaded into the container for execution when request from the client triggers a particular function. After the execution in the container ,response is generated and delivered back to the client.&lt;/p&gt;

&lt;h3 id=&quot;things-serverless-computing-can-handle&quot;&gt;Things Serverless Computing can Handle&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Load Balancing&lt;/li&gt;
  &lt;li&gt;Auto scaling&lt;/li&gt;
  &lt;li&gt;Handling Failures&lt;/li&gt;
  &lt;li&gt;Security Isolation&lt;/li&gt;
  &lt;li&gt;OS Management&lt;/li&gt;
  &lt;li&gt;Managing utilization&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sample-use-case-scenario-of-serverless-computing&quot;&gt;Sample Use-Case Scenario of Serverless Computing&lt;/h2&gt;
&lt;p&gt;When an image is uploaded into a Cloud Storage Service (such as S3), a Serverless function could automatically resize the image for mobile, tablet, desktop devices. The event that triggers the function is the file that has been uploaded to cloud storage. Serverless function then executes the function of resizing the image.&lt;/p&gt;

&lt;h2 id=&quot;benefits-of-serverless-computing&quot;&gt;Benefits of Serverless Computing:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Pay only when you use:&lt;/strong&gt;The user will be charged against the time that your functions were running (Paid according to no. of request received and Compute time) . Such architectures remove the need for the traditional ‘always on’ server system sitting behind an application, significantly reducing operational cost and complexity.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Easier Operational Management and Automatic Scaling:&lt;/strong&gt;Automatic scaling functionality of FaaS not only reduces computational cost but also reduces operational management overheads.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Serverless Framework module:&lt;/strong&gt;The Serverless Framework consists of an open source CLI that makes it easy to develop, deploy and test serverless apps across different cloud providers, secure and monitor your serverless apps. This can be installed using the below command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; serverless
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;serverless-computing-using-aws-lambda&quot;&gt;Serverless Computing using AWS Lambda&lt;/h2&gt;
&lt;p class=&quot;lead&quot;&gt;Follow the below steps to deploy a simple serverless service using AWS Lambda&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Configure your CLI with the below command:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverless config credentials - provider aws - key &lt;span class=&quot;s2&quot;&gt;&quot;YOUR ACCOUNT KEY&quot;&lt;/span&gt; - secret &lt;span class=&quot;s2&quot;&gt;&quot; YOUR SECRET KEY&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a project folder for serverless computing with needed template.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverless create &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; aws-nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;It creates two files : &lt;strong&gt;handler.js&lt;/strong&gt; and &lt;strong&gt;serverless.yml&lt;/strong&gt;. &lt;strong&gt;serverless.yml&lt;/strong&gt; is like a configuration file for your handler file, &lt;strong&gt;handler.js&lt;/strong&gt; is like a function file where each function that are required are coded.&lt;/li&gt;
  &lt;li&gt;Uncomment the needed event part in the serverless.yml .Here i am using the http event part
&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/cloudsecurity/serverlesscomputing/3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Run the command serverless deploy to deploy your instance.
&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/cloudsecurity/serverlesscomputing/4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;serverless-computing-using-azure-functions&quot;&gt;Serverless Computing using Azure Functions&lt;/h2&gt;
&lt;p class=&quot;lead&quot;&gt;Microsoft Azure allows the users to develop and run the serverless functions both on Cloud and Local environment. 
Follow the below steps to deploy a simple serverless service using Azure Functions&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Run the following command from the command line to create a function app project. A github repository is also created with the same name.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func init &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Folder_Name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Select a worker runtime from the following language choices that will be prompted after creating the project:
    &lt;ul&gt;
      &lt;li&gt;.NET&lt;/li&gt;
      &lt;li&gt;Node JS&lt;/li&gt;
      &lt;li&gt;Powershell&lt;/li&gt;
      &lt;li&gt;Python&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Navigate to the created project folder.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Folder_Name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create an HTTP-triggered function using the following command:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func new &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Function_Name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--template&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HttpTrigger&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/cloudsecurity/serverlesscomputing/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The following command starts the function app:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Navigate to URL displayed, append the query string &lt;em&gt;?name={yourname}&lt;/em&gt; to the URL and execute the request.
&lt;img src=&quot;https://r3dw0lfsec.in/assets/img/blog/cloudsecurity/serverlesscomputing/6.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;serverless-computing-using-google-cloud-functions&quot;&gt;Serverless Computing using Google Cloud Functions&lt;/h2&gt;
&lt;p&gt;Follow the below steps to deploy a simple serverless service using Google Cloud Functions&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Install serverless on your machine if not installed.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; serverless
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a project folder for serverless computing with needed template.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverless create &lt;span class=&quot;nt&quot;&gt;--template&lt;/span&gt; google-nodejs &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Folder_Name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;It creates three files: &lt;strong&gt;index.js&lt;/strong&gt;, &lt;strong&gt;package.json&lt;/strong&gt;, &lt;strong&gt;serverless.yml&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Install all the dependencies
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create the credential key for your project on Google Cloud Console, download the key and update the key path on serverless.yml&lt;/li&gt;
  &lt;li&gt;Deploy the Serverless Instance
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverless deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;comparison&quot;&gt;Comparison&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://r3dw0lfsec.inassets/img/blog/cloudsecurity/serverlesscomputing/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;security-risks-in-serverless-computing&quot;&gt;Security Risks in Serverless Computing&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Function Event-Data Injection&lt;/strong&gt;: Serverless functions can consume input form different types of event sources. Various parts of these event sources may contain user-controlled or untrusted inputs that should be carefully inspected.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Broken Authentication&lt;/strong&gt;: Applications may contain dozens or even hundreds of functions. Applying robust authentication can easily go awry if not executed carefully.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Serverless Business Logic Manipulation&lt;/strong&gt;: Serverless applications are unique as they often follow the micro-services design and contain numerous functions chained together to form overall logic. Without proper enforcement, attackers may be able to tamper with intended logic.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Insecure Application  Secrets Storage&lt;/strong&gt;: In Serverless application secrets such as Credentials, API Key etc. may be stored in a plain text configuration file that may be accessible to the end user and in some cases these credentials will be in plain text, as environment variables.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Improper Exception Handling and Verbose Error Messages&lt;/strong&gt;: Serverless computing provides line-by-line debugging options for applications. As a result, developers frequently adopt the use of verbose error messages, which may leak sensitive data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;lead&quot;&gt;Happy Hacking!&lt;/p&gt;</content><author><name>Venkatraman K</name><email>kvenkatraman10@gmail.com</email></author><category term="Blogs" /><category term="CloudSecurity" /><summary type="html">Most of the Serverless architecture are built with a motto of “Focus on the application, not the infrastructure and maintenance”</summary></entry></feed>